# .github/workflows/terraform-apply.yml

name: Terraform Apply

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud provider to deploy to'
        required: true
        default: 'digitalocean'
        type: choice
        options:
        - digitalocean
        - azure
        - aws
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      destroy:
        description: 'Destroy infrastructure instead of creating'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.6'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec-results.sarif

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

  determine-matrix:
    name: Determine deployment matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set deployment matrix
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            CLOUD="${{ github.event.inputs.cloud_provider }}"
            ENV="${{ github.event.inputs.environment }}"
            echo "matrix={\"include\":[{\"cloud\":\"$CLOUD\",\"environment\":\"$ENV\"}]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "matrix={\"include\":[{\"cloud\":\"digitalocean\",\"environment\":\"production\"},{\"cloud\":\"azure\",\"environment\":\"production\"}]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[{\"cloud\":\"digitalocean\",\"environment\":\"dev\"},{\"cloud\":\"azure\",\"environment\":\"dev\"}]}" >> $GITHUB_OUTPUT
          fi

  bootstrap:
    name: Bootstrap - ${{ matrix.cloud }} (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: [security-scan, determine-matrix]
    strategy:
      matrix: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}
      fail-fast: false
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure DigitalOcean credentials
        if: matrix.cloud == 'digitalocean'
        run: |
          echo "DIGITALOCEAN_TOKEN=${{ secrets.DIGITALOCEAN_TOKEN }}" >> $GITHUB_ENV
          echo "SPACES_ACCESS_KEY_ID=${{ secrets.DO_SPACES_KEY }}" >> $GITHUB_ENV
          echo "SPACES_SECRET_ACCESS_KEY=${{ secrets.DO_SPACES_SECRET }}" >> $GITHUB_ENV

      - name: Configure Azure credentials
        if: matrix.cloud == 'azure'
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Terraform Init - Bootstrap
        run: |
          cd terraform/modules/bootstrap/${{ matrix.cloud }}
          terraform init

      - name: Terraform Plan - Bootstrap
        id: plan-bootstrap
        run: |
          cd terraform/modules/bootstrap/${{ matrix.cloud }}
          terraform plan -out=tfplan \
            -var="environment=${{ matrix.environment }}" \
            -var="project_name=multi-cloud-k8s"

      - name: Terraform Apply - Bootstrap
        if: github.event.inputs.destroy != 'true'
        run: |
          cd terraform/modules/bootstrap/${{ matrix.cloud }}
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy - Bootstrap
        if: github.event.inputs.destroy == 'true'
        run: |
          cd terraform/modules/bootstrap/${{ matrix.cloud }}
          terraform destroy -auto-approve \
            -var="environment=${{ matrix.environment }}" \
            -var="project_name=multi-cloud-k8s"

      - name: Save bootstrap outputs
        if: github.event.inputs.destroy != 'true'
        run: |
          cd terraform/modules/bootstrap/${{ matrix.cloud }}
          mkdir -p ../../outputs
          terraform output -json > ../../outputs/bootstrap-${{ matrix.cloud }}-${{ matrix.environment }}.json
          
          # Create individual files for backward compatibility
          terraform output -raw bucket_name > ../../outputs/${{ matrix.cloud }}-bucket-${{ matrix.environment }}.txt || echo "n/a" > ../../outputs/${{ matrix.cloud }}-bucket-${{ matrix.environment }}.txt
          terraform output -raw bucket_region > ../../outputs/${{ matrix.cloud }}-region-${{ matrix.environment }}.txt || echo "n/a" > ../../outputs/${{ matrix.cloud }}-region-${{ matrix.